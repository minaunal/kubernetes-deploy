stages:
  - build
  - test
  - docker
  - analyze
  - deploy

build:
  stage: build
  image: python:3.9-slim
  script:
    - pip install flask
    - python app.py & echo $! > flask.pid
    - sleep 10
    - kill $(cat flask.pid)

test:
  stage: test
  image: python:3.9-slim
  script:
    - pip install flask
    - if [ -f flask.py ]; then
        echo "test.py file exists. Running tests...";
        python flask.py;
      else
        echo "No flask.py file found. Skipping tests.";
      fi


docker:
  image: docker:stable
  stage: docker
  variables:
    DOCKER_BUILD_DIR: "."
    DOCKER_BUILD_FILE: "Dockerfile"
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_ENV: ${CI_COMMIT_BRANCH}
    DOCKER_IMAGE_URI: https://k8s-master-codecamp24.obss.io:30003/codecamp
  services:
    - name: docker:26.0.0-dind
      alias: docker
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  before_script:
    - export DOCKER_IMAGE_TAG=${CI_COMMIT_SHORT_SHA}
  script:
    - docker login -u minaunall -p mina12345l.
    - docker build -t "k8s-master-codecamp24.obss.io:30003/codecamp/minaunal/python" .
    - docker login -u mina.unal -p 2EY5pk2S9Gar https://k8s-master-codecamp24.obss.io:30003/
    - docker push "k8s-master-codecamp24.obss.io:30003/codecamp/minaunal/python"
analyze:
  stage: analyze
  image:
    name: sonarsource/sonar-scanner-cli:5.0.1
    entrypoint: [""]
  variables:
    SONAR_SCANNER_OPTS: "-Xmx1024m"
    GIT_DEPTH: 0
    SONAR_HOST_URL: https://codecamp24-sonarqube.obss.io
    SONAR_TOKEN: "sqa_5f9f35a0e6357e919b55c0f8cba279f175f9593c"
  before_script:
    - echo "192.168.210.103 codecamp24-sonarqube.obss.io" >> /etc/hosts
    - echo "192.168.210.104 codecamp24-sonarqube.obss.io" >> /etc/hosts
  script:
    - |
      sonar-scanner -Dsonar.userHome='/tmp' -Dsonar.qualitygate.wait=true \
        -Dsonar.projectKey="${CI_PROJECT_NAMESPACE//\//-}-$CI_PROJECT_NAME" \
        -Dsonar.projectName="$CI_PROJECT_TITLE" \
        -Dsonar.projectVersion="$CI_COMMIT_REF_SLUG" \
        -Dsonar.host.url="${SONAR_HOST_URL}" \
        -Dsonar.login="${SONAR_TOKEN}"
  allow_failure: true

deploy:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  before_script:
    - export KUBECONFIG=$(pwd)/config
    - echo "$KUBECONFIG_CONTENT">$KUBECONFIG
  variables:
    KUBECONFIG: /builds/mina-unal/.kube/config
  script:
    - kubectl apply -f deployment.yml -f service.yml -f hpa.yml -n mina
    - kubectl get pods -n mina
    - kubectl get svc my-python-app -n mina
    - kubectl describe svc my-python-app -n mina
  only:
    - main
